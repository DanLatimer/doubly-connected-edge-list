
#include "stdafx.h"
#include "common.h"
#include "GMLFile.h"
#include "utils.h"
#include "Polygon.h"

#include <iostream>
#include <sstream>

#include "rapidxml.hpp"
#include "rapidxml_iterators.hpp"
#include "rapidxml_print.hpp"
#include "rapidxml_utils.hpp"

using namespace rapidxml;
using namespace std;
using namespace dnl;

// Root Tag
const static string TAG_FeatureCollection("ogr:FeatureCollection");

// Feature Tags
const static string TAG_FeatureMember("gml:featureMember");
const static string TAG_GeometryProperty("ogr:geometryProperty");
const static string TAG_LineString("gml:LineString");
const static string TAG_Coordinates("gml:coordinates");
const static string TAG_Fullname("ogr:FULLNAME");

const static string TAG_Polygon("gml:Polygon");
const static string TAG_OuterBoundary("gml:outerBoundaryIs");
const static string TAG_InnerBoundary("gml:innerBoundaryIs");
const static string TAG_LinearRing("gml:LinearRing");

/* Example of polygon with two inner rings
<ogr:geometryProperty>
<gml:Polygon srsName="EPSG:4326">
	<gml:outerBoundaryIs>
		<gml:LinearRing>
			<gml:coordinates>-71.157233787771034,43.244727889407891,141.379555285908282 -71.157077775290745,43.244201908441113,141.377809770405293 -71.156795763338636,43.243995917576804,141.376927525736392 -71.156451752010042,43.243972920975644,141.376548018306494 -71.155482724268452,43.244200920615889,141.376372558996081 -71.155263716937242,43.24417792306317,141.376105456613004 -71.154200675124187,43.243628949780344,141.373474230989814 -71.15418767467996,43.243626949947149,141.373456439003348 -71.153481650507004,43.243514959120503,141.372479869052768 -71.153574647187327,43.243072973409078,141.371214535087347 -71.155078690158675,43.242712974176499,141.371468108147383 -71.157728765888876,43.242079975483549,141.371919089928269 -71.15891280097415,43.241884973087402,141.372388686984777 -71.159481817190056,43.241745973472476,141.372476165182889 -71.159901832970604,43.241910964676549,141.373357439413667 -71.160069840806756,43.242083957527534,141.374036503955722 -71.160274853942127,43.242545940290888,141.375630833208561 -71.16065587085437,43.242877926125544,141.376986690796912 -71.160787875702169,43.242921923627726,141.377239680849016 -71.161046884653913,43.242968920061266,141.377616045996547 -71.161166887907314,43.24292792053884,141.377598840743303 -71.161755901557711,43.242563928405396,141.377017691731453 -71.162593914097314,43.241562955990986,141.374716454185545 -71.163117915599088,43.240491988344061,141.371919136494398 -71.163278910051304,43.239741012603162,141.369771910831332 -71.163617914083403,43.239263026243464,141.368617963977158 -71.164490941698773,43.239242020309717,141.369339124299586 -71.164584946655665,43.239379014944809,141.369841806590557 -71.164798954267468,43.239433011482994,141.370199108496308 -71.165303972252232,43.239562003260417,141.371047073043883 -71.165831995046062,43.239976985157142,141.372788593173027 -71.16602300328988,43.240126978612622,141.373418198898435 -71.166127007640867,43.240198975377474,141.37373148649931 -71.166869043203633,43.241029941528382,141.376935082487762 -71.167899093090739,43.242219893305254,141.381493301130831 -71.168357117451919,43.242901866676263,141.383986601606011 -71.168660137512774,43.243629839667392,141.386480808258057 -71.168912148776585,43.243854830114117,141.387394128367305 -71.169024153740011,43.243951825970022,141.38779089320451 -71.170056189347079,43.244134811901695,141.389277729205787 -71.171276234884246,43.244592787070729,141.3917729081586 -71.173089306537648,43.245552740690911,141.396333481185138 -71.17402834015472,43.245804724988879,141.397947277873755 -71.175716397393913,43.246033704361523,141.40016482770443 -71.177530453758337,43.245918694444612,141.40144616458565 -71.178750487237167,43.245530698314646,141.401360051706433 -71.180032519419072,43.2449127095161,141.40062796138227 -71.182534574000272,43.243129750953344,141.397438975051045 -71.183285594433528,43.242878753748592,141.397348989732563 -71.185377656200814,43.242519749990883,141.398136526346207 -71.186756696924618,43.242283747491555,141.3986577084288 -71.186997703061408,43.242173749387923,141.398538992740214 -71.188163732783138,43.241643758488401,141.397971358150244 -71.1897267687377,43.240660779937215,141.39637884311378 -71.189861772141128,43.24059678108042,141.396305087953806 -71.19050878851958,43.240294786398998,141.395966031588614 -71.190610791595077,43.240281786062873,141.396018194966018 -71.199408148295404,43.245573539424917,141.420087151229382 -71.199391148094264,43.245597538740171,141.420145065523684 -71.199298152624706,43.246123521601476,141.42166617885232 -71.199485162511792,43.246397510878808,141.422670571133494 -71.199431165764253,43.246746499448925,141.423686748370528 -71.199369166136023,43.246911494323236,141.42413433175534 -71.198360145148243,43.24770147521221,141.425635986030102 -71.19820414472602,43.248021465544618,141.426471815444529 -71.198266155838837,43.248661443358479,141.428480240516365 -71.19782914774531,43.249073432712564,141.429343704134226 -71.197891153636718,43.249347422944162,141.43023547437042 -71.198232172229226,43.249886402058529,141.432186936959624 -71.198891218525659,43.25165433705687,141.438174090348184 -71.198763219199137,43.251988326702836,141.439077763818204 -71.198419209013849,43.252045327392189,141.438941900618374 -71.197669184392012,43.252000334637117,141.438129303976893 -71.196730154854322,43.252034340643064,141.437387553974986 -71.196230140494194,43.252148340588114,141.437285150401294 -71.195573134098339,43.253172310862531,141.439817524515092 -71.195511143859321,43.253995283419805,141.442272367887199 -71.195730154129507,43.254224273982807,141.443168120458722 -71.196043173270382,43.25486424988906,141.445402277633548 -71.196230181204726,43.255001243816622,141.445988559164107 -71.196418193081271,43.255412228443404,141.447411579079926 -71.197200234398281,43.25655518371515,141.451602296903729 -71.198047274198601,43.257446147038983,141.455082762055099 -71.198201281420864,43.257607140404588,141.455712517723441 -71.198546307797017,43.258682101317589,141.459302194416523 -71.19879632264292,43.259162083133582,141.46099139098078 -71.19882732754553,43.259436073605556,141.46185505669564 -71.198421314891306,43.259459075921676,141.461559677496552 -71.198077301607341,43.259299083970653,141.460761934518814 -71.197920290391934,43.258865099885369,141.459296781569719 -71.197774282997017,43.258674107475819,141.458582740277052 -71.197571272352121,43.258383118892183,141.457512347958982 -71.196893242279515,43.257795144002721,141.455108357593417 -71.196538223877312,43.257301163462799,141.453281878493726 -71.196407217090908,43.257119170633977,141.452608773484826 -71.195725185592821,43.256440198861931,141.449923546984792 -71.195145153418366,43.255485235673419,141.446488186717033 -71.195124149750171,43.255275242955967,141.445828672498465 -71.194881140938406,43.255202247284551,141.445387217216194 -71.194718137467319,43.255324244389485,141.445612636394799 -71.194081121608036,43.255640238528507,141.446003139950335 -71.193872124471625,43.25630921743258,141.447855774313211 -71.193156111751051,43.257022198710501,141.449386200867593 -71.19200408279049,43.257574188773049,141.450033047236502 -71.19122606775818,43.258264171304873,141.451437525451183 -71.191230078360633,43.258998146383711,141.453680091537535 -71.19151609896619,43.259801116973669,141.45638691727072 -71.191488109231301,43.260583090670529,141.458747013472021 -71.19177012086125,43.260766082315399,141.459559028036892 -71.192241136265977,43.260790077910642,141.460056177340448 -71.192996152959722,43.260268089854478,141.459143552929163 -71.193436165417467,43.260155090331466,141.45919493958354 -71.193615171612606,43.260188087847695,141.459456724114716 -71.194276197474778,43.260519071583985,141.461061352863908 -71.195211230614674,43.260746056757483,141.462595418095589 -71.19558324770648,43.261110041578377,141.464040544815361 -71.196082266575758,43.261314030856198,141.46511197835207 -71.196549282494615,43.261383024955485,141.465742842294276 -71.196954293775548,43.26126602583436,141.465750578790903 -71.197296305354456,43.261311021700529,141.466195722110569 -71.196790301536254,43.262176996195485,141.468381559476256 -71.195973274082007,43.262084005578863,141.467362424358726 -71.195438254018356,43.261877016677104,141.466249450109899 -71.194180202312424,43.261073053530851,141.462664732709527 -71.192798157204066,43.261009066238103,141.461225529201329 -71.192205142051279,43.261276061706035,141.461506164632738 -71.19089409755712,43.261096077804481,141.459777136333287 -71.19052008298496,43.260913086860825,141.458882328122854 -71.189835051645602,43.260252114496161,141.45624958910048 -71.189431025026323,43.259292150128701,141.45295768044889 -71.189339012980156,43.258654172464752,141.450928743928671 -71.189153002465943,43.258334184734139,141.449785208329558 -71.188716984627817,43.25806119731552,141.448560029268265 -71.188247970300452,43.258108199296771,141.448281292803586 -71.187873961921753,43.25835919363594,141.448710348457098 -71.187385952137475,43.258767183520249,141.449515729211271 -71.186718932819034,43.258908183823117,141.449345563538373 -71.18638892394938,43.259026182337124,141.449408531188965 -71.184968878523648,43.259025193194439,141.448127606883645 -71.183769838224748,43.258888206978519,141.446630753576756 -71.183060823782412,43.25946519281662,141.447752874344587 -71.182652819494038,43.260079175106561,141.449258706532419 -71.181919803356308,43.260591163332521,141.45016096252948 -71.181314787474165,43.260834159704061,141.450357851572335 -71.180501757092912,43.260527176309246,141.448689904995263 -71.179880729984973,43.260019198266512,141.446581575088203 -71.179593715214153,43.259627213745404,141.445127581246197 -71.179359700113011,43.259093233635596,141.443288089707494 -71.17917569263075,43.258981238835524,141.442780887708068 -71.17878867594608,43.258679252025054,141.441511450335383 -71.178150647953615,43.2581472749265,141.439314550720155 -71.178135647431105,43.25814427514252,141.439291904680431 -71.177403623763851,43.258126281330583,141.438578438945115 -71.177048613337433,43.258191281831415,141.438457356765866 -71.176679600937135,43.25814928606723,141.437997265718877 -71.17621058519596,43.258097291404027,141.437416711822152 -71.175676565122572,43.25788730259378,141.436295690946281 -71.174943536060766,43.257493321539137,141.434434332884848 -71.173171459838272,43.256122381531611,141.428657758049667 -71.173220459836855,43.25601238488867,141.428366247564554 -71.172435429869012,43.255671402433045,141.426619786769152 -71.169782326059391,43.254341467747253,141.420175748877227 -71.168441270456171,43.253449508213457,141.416248113848269 -71.16779724300369,43.252968529431925,141.414201327599585 -71.167037210601706,43.252400554484737,141.411784761585295 -71.166886194469996,43.251607582531257,141.409229386597872 -71.166922185715933,43.250912605830464,141.407141181640327 -71.166704175893756,43.250712614274526,141.406334864906967 -71.16667317169572,43.250487622142501,141.405620451085269 -71.165549118035955,43.249244672865323,141.400816757231951 -71.165443113078553,43.249134677403866,141.400385771878064 -71.165081091812027,43.248454703227431,141.39798525441438 -71.164692075139882,43.248157716264615,141.396729120053351 -71.16234398382295,43.247018772781892,141.391141799278557 -71.159411873290694,43.245841835033993,141.384913377463818 -71.157729810740321,43.245226868702872,141.381524101831019 -71.157233787771034,43.244727889407891,141.379555285908282</gml:coordinates>
		</gml:LinearRing>
	</gml:outerBoundaryIs>
	<gml:innerBoundaryIs>
		<gml:LinearRing>
			<gml:coordinates>-71.195857019466843,43.244500602905056,141.413615543395281 -71.195857016215001,43.244272610641737,141.412919864989817 -71.195982018899059,43.244180612810723,141.41275171097368 -71.196014016342247,43.243929621084042,141.412014665082097 -71.195763003754109,43.243609633856153,141.410812241025269 -71.195293983540878,43.243243649851095,141.409273150376976 -71.19448095851962,43.243311653740648,141.408748576417565 -71.193730931291142,43.243083667194355,141.4073775568977 -71.193417921284691,43.243083669580066,141.407095730304718 -71.193073912240777,43.243220667553054,141.407204025425017 -71.19294891085417,43.243403662295883,141.40764987282455 -71.192948920964838,43.244112638237176,141.409813247621059 -71.193167935467599,43.244638618719478,141.411615394987166 -71.19335594343184,43.244775612637824,141.412202686071396 -71.194512985955171,43.245163590653171,141.414428306743503 -71.196170042523988,43.245415569471326,141.416689219884574 -71.196327045261128,43.245255573703524,141.416342406533659 -71.196389044305036,43.245049580220815,141.415769697166979 -71.195857019466843,43.244500602905056,141.413615543395281</gml:coordinates>
		</gml:LinearRing>
	</gml:innerBoundaryIs>
	<gml:innerBoundaryIs>
		<gml:LinearRing>
			<gml:coordinates>-71.168054140319029,43.245186791454934,141.39068706240505 -71.167523123339009,43.245186795498604,141.390209415927529 -71.167179114290718,43.245323793470114,141.390318051911891 -71.166991112838318,43.245643784045072,141.391125448048115 -71.166991118380949,43.246032770847627,141.392312500625849 -71.168617182759988,43.246901728983559,141.396426854655147 -71.169837224053182,43.247061714264206,141.3980125291273 -71.171056268250084,43.247427692563527,141.400225936435163 -71.171275274925407,43.247404691675769,141.400352768599987 -71.171463279312505,43.247290694111335,141.400174038484693 -71.17152527704809,43.24699270374883,141.399320496246219 -71.170994253555278,43.246535723297228,141.397448296658695 -71.170681236050541,43.246009743526415,141.395561646670103 -71.170275218835513,43.245712756694843,141.394290112890303 -71.169118178574792,43.245483773275652,141.392550497315824 -71.168054140319029,43.245186791454934,141.39068706240505</gml:coordinates>
		</gml:LinearRing>
	</gml:innerBoundaryIs>
</gml:Polygon>
</ogr:geometryProperty>
*/

// Boundary tags
const static string TAG_BoundedBy("gml:boundedBy");
const static string TAG_Box("gml:Box");
const static string TAG_Coord("gml:coord");
const static string TAG_X("gml:X");
const static string TAG_Y("gml:Y");

// Attributes
const static string ATTRIBUTE_fid("fid");

const static double smallestX = -90;
const static double smallestY = -90;
const static double largestX = 90;
const static double largestY = 90;


bool parseBoundary(xml_node<> *allFeatures, double &llX, double &llY, double &urX, double &urY)
{
	llX = smallestX;
	llY = smallestY;
	urX = largestX;
	urY = largestY;

	if(allFeatures == NULL)
	{
		return false;
	}

	xml_node<> *boundedBy = 
		allFeatures->first_node(TAG_BoundedBy.c_str());

	if(boundedBy == NULL)
	{
		return false;
	}

	xml_node<> *box = boundedBy->first_node(TAG_Box.c_str());
	if(box == NULL)
	{
		return false;
	}

	xml_node<> *lowerLeft = box->first_node(TAG_Coord.c_str());
	if(lowerLeft == NULL)
	{
		return false;
	}

	xml_node<> *upperRight = lowerLeft->next_sibling(TAG_Coord.c_str(), TAG_Coord.size());
	if(upperRight == NULL)
	{
		return false;
	}

	xml_node<> *LLx = lowerLeft->first_node(TAG_X.c_str());
	xml_node<> *LLy = lowerLeft->first_node(TAG_Y.c_str());
	xml_node<> *URx = upperRight->first_node(TAG_X.c_str());
	xml_node<> *URy = upperRight->first_node(TAG_Y.c_str());
	if(LLx == NULL || LLy == NULL || URx == NULL || URy == NULL)
	{
		return false;
	}

	llX = utils::parseDouble(LLx->value());
	llY = utils::parseDouble(LLy->value());
	urX = utils::parseDouble(URx->value());
	urY = utils::parseDouble(URy->value());

	return true;
}

// Parses a string of ordinate singles, pairs, triples etc.. into a polyline.
bool parseLineString(string ordinateValues, dnl::Polyline &line)
{
	// tokenize the string by spaces.
	stringstream stream(ordinateValues);

	char buffer[1000];

	string current;
	while(!stream.eof())
	{
		stream >> current;

		if(current.size() > 1000)
		{
			ReportError("Ordinate pairs must be less then 1000 characters long.");
			return false;
		}

		memset(buffer, 0, 1000);
		memcpy(buffer, current.c_str(), current.size());

		char *ordinate = strtok(buffer, ",");
		if(ordinate == NULL)
		{
			ReportError("Ordinates must have at least latitude and longitude \"lat,long lat,long lat,long\" in each space separated ordinate pair.");
			return false;
		}
		double latitude = utils::parseDouble(ordinate);

		ordinate = strtok (NULL, ",");
		if(ordinate == NULL)
		{
			ReportError("Ordinates must have at least latitude and longitude \"lat,long lat,long lat,long\" in each space separated ordinate pair.");
			return false;
		}
		double longitude = utils::parseDouble(ordinate);

		line.addPoint(dnl::Point(latitude, longitude));

		// ignore other ordinates such as depth/altitude for now.
	}

	return true;
}

bool GMLFile::parseRing(xml_node<> *ringNode, dnl::Polyline &ring)
{
	if(ringNode == NULL)
	{
		return false;
	}

	xml_node<> *linearRing = ringNode->first_node(TAG_LinearRing.c_str());
	if(linearRing == NULL)
	{
		ReportError("gml:outerBoundaryIs must contain at a gml:LinearRing node.");
		return false;
	}

	xml_node<> *coordinates = linearRing->first_node(TAG_Coordinates.c_str());
	if(coordinates == NULL)
	{
		ReportError("gml:LinearRing must contain at a gml:coordinates node.");
		return false;
	}

	const bool success = parseLineString(coordinates->value(), ring);
	if(!success)
	{
		ReportError("Did not successfully parseLineString(coordinates->value(), ring)");
		return false;
	}

	return true;
}

bool GMLFile::parseFeature(xml_node<> *currentFeature)
{
	if(currentFeature == NULL)
	{
		return false;
	}

	// Go one child down
	xml_node<> *featureContents = currentFeature->first_node();

	// Get FID
	string fid;
	xml_attribute<> *fidAttribute = 
		featureContents->first_attribute(ATTRIBUTE_fid.c_str(), ATTRIBUTE_fid.size());
	if(fidAttribute != NULL)
	{
		fid = fidAttribute->value(); 
	}

	string featureName("unnamed feature");
	xml_node<> *fullName = featureContents->first_node(TAG_Fullname.c_str());
	if(fullName != NULL)
	{
		featureName = fullName->value();
	}
	
	xml_node<> *geometryProperty = featureContents->first_node(TAG_GeometryProperty.c_str());
	if(geometryProperty == NULL)
	{
		ReportError("Feature Member must have a geometry (ogr:geometryProperty) tag.");
		return false; 
	}
	
	xml_node<> *geometry = geometryProperty->first_node();
	if(geometry == NULL)
	{
		ReportError("ogr:geometryProperty must contain at least one node.");
		return false;
	}

	string geometryTagName = geometry->name();
	if(geometryTagName == TAG_LineString)
	{
		xml_node<> *coordinates = geometry->first_node(TAG_Coordinates.c_str());
		if(coordinates == NULL)
		{
			ReportError("gml:LineString must contain at a gml:coordinates node.");
			return false;
		}

		dnl::Polyline line(featureName);
		const bool success = parseLineString(coordinates->value(), line);
		if(!success)
		{
			ReportError("Did not successfully parseLineString(coordinates->value(), line)");
			return false;
		}

		m_lines.push_back(line);
	}
	else if(geometryTagName == TAG_Polygon)
	{
		xml_node<> *outerBoundary = geometry->first_node(TAG_OuterBoundary.c_str());
		if(outerBoundary == NULL)
		{
			ReportError("gml:Polygon must contain at a gml:outerBoundaryIs node.");
			return false;
		}

		dnl::Polygon polygon(featureName);
		dnl::Polyline outerRing(featureName);

		bool success = parseRing(outerBoundary, outerRing);
		if(!success)
		{
			ReportError("Did not successfully parseRing(outerBoundary, outerRing)");
			return false;
		}

		polygon.setOuterRing(outerRing);
		
		xml_node<> *innerBoundary = geometry->first_node(TAG_InnerBoundary.c_str());
		while(innerBoundary != NULL)
		{
			dnl::Polyline innerRing(featureName);

			bool success = parseRing(innerBoundary, innerRing);
			if(!success)
			{
				ReportError("Did not successfully parseRing(innerBoundary, innerRing)");
				return false;
			}

			polygon.addInnerRing(innerRing);

			innerBoundary = innerBoundary->next_sibling(TAG_InnerBoundary.c_str());
		}

		m_areas.push_back(polygon);
	}
	else
	{
		ReportError("Geometry type \"" + geometryTagName + "\" not yet supported, add code to parse it.");
	}

	return true;
}

void GMLFile::print(PrintManager &printMan)
{
	//printMan.m_LLDG = true;
	
	// Print points

	// Print lines
	for(unsigned int i = 0; i < m_lines.size(); i++)
	{
		m_lines[i].print(printMan);
	}

	// Print Areas
	for(unsigned int i = 0; i < m_areas.size(); i++)
	{
		m_areas[i].print(printMan);
	}

	printMan.m_LLDG = false;
}

bool GMLFile::parseFeatures(xml_node<> *allFeatures)
{
	if(allFeatures == NULL)
	{
		return false;
	}

	xml_node<> *currentFeature = 
		allFeatures->first_node(TAG_FeatureMember.c_str());
	while(currentFeature != NULL)
	{
		const bool success = parseFeature(currentFeature);
		if(!success)
		{
			ReportError("Did not successfully parseFeature(currentFeature)");
			//return false;
		}

		currentFeature = currentFeature->next_sibling(TAG_FeatureMember.c_str());
	}

	return true;
}

bool GMLFile::createBoundingBox(dnl::Point &llBox, dnl::Point &urBox)
{
	bool firstFeatureAdded = false;

	// Get a bounding box of all features
	for(unsigned int i = 0; i < m_lines.size(); i++)
	{
		dnl::Point lowerLeft, upperRight;
		m_lines[i].getBoundingRectangle(lowerLeft, upperRight);

		if(firstFeatureAdded == false)
		{
			firstFeatureAdded = true;
			llBox = lowerLeft;
			urBox = upperRight;
		}
		else
		{
			utils::expandBoundingBox(llBox, urBox, lowerLeft, upperRight);
		}
	}

	for(unsigned int i = 0; i < m_areas.size(); i++)
	{
		dnl::Point lowerLeft, upperRight;
		bool success = m_areas[i].getBoundingRectangle(lowerLeft, upperRight);
		if(!success)
		{
			ReportError("unable to get bounding box of Rectangle");
			return false;
		}

		if(firstFeatureAdded == false)
		{
			firstFeatureAdded = true;
			llBox = lowerLeft;
			urBox = upperRight;
		}
		else
		{
			utils::expandBoundingBox(llBox, urBox, lowerLeft, upperRight);
		}
	}

	return true;
}

bool GMLFile::parse(const string &filename)
{

	ifstream fin(filename.c_str());
	if (fin.fail())
	{
		return false;
	}

	fin.seekg(0, ios::end);
	const int length = fin.tellg();
	fin.seekg(0, ios::beg);
	char* buffer = new char[length + 1];
	memset(buffer, 0, length);
	fin.read(buffer, length);
	buffer[length] = '\0';

	fin.close();

	xml_document<> doc;
	doc.parse<0>(buffer);

	// Get FeatureCollection Node
	xml_node<> *allFeatures = 
		doc.first_node(TAG_FeatureCollection.c_str());

	if(allFeatures == NULL)
	{
		return false;
	}

	const bool success = parseFeatures(allFeatures);
	if(!success)
	{
		std::cout << "Did not successfully parseFeatures(allFeatures)" << std::endl;
	}

	const bool boundaryFound = parseBoundary(allFeatures, m_llX, m_llY, m_urX, m_urY);
	if(boundaryFound == false)
	{
		dnl::Point llBox, urBox;
		bool success = createBoundingBox(llBox, urBox);
		if(!success)
		{
			ReportError("Unable to create bounding box.");
			return false;
		}

		this->m_llX = llBox.m_x;
		this->m_llY = llBox.m_y;
		this->m_urX = urBox.m_x;
		this->m_urX = urBox.m_y;
	}


	delete [] buffer;

	return true;
}